<?php
// $Id$

require_once ( dirname(__FILE__) . '/amazon_r53.lib.inc');

/**
 * Implements the hook_perm()
 */
function amazon_r53_perm() {
  return array(
    'create r53 zone',
    'manage r53 settings',
    'manage r53 entries',
    'add r53 entry',
    'edit r53 entry'
  );
}

/**
 * Implements the hook_menu()
 * 
 */
function amazon_r53_menu() {

  $items = array();

  $items['admin/settings/r53'] = array(
    'title'            => t('Amazon R53'),
    'description'      => t('Amazon Route 53 Service Options.'),
    'position'         => 'left',
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('manage r53 settings'),
    'weight'           => -40,
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
  );

  $items['admin/settings/r53/zones'] = array(
    'title'            => t('Zones'),
    'description'      => t('List all zone files associated with your Amazon AWS Account.'),
    'page callback'    => 'amazon_r53_list_hosted_zones',
    'access arguments' => array('manage r53 zones'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 100,
  );
  
  $items['admin/settings/r53/settings'] = array(
    'title'            => t('Settings'),
    'description'      => t('Manage the Amazon Account Information and settings.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('amazon_r53_settings'),
    'access arguments' => array('manage r53 settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'amazon_r53.admin.inc',
    'weight'           => 101,
  );

  $items['admin/settings/r53/list'] = array(
    'title'            => t('List'),
    'description'      => t('List all the settings for the current zone file.'),
    'page callback'    => 'amazon_r53_list',
    'page arguments'   => array('manage r53 entries'),
    'access arguments' => array('manage r53'),
    'weight'           => 102,
    'type'             =>  MENU_NORMAL_ITEM,
  );

  $items['admin/settings/r53/add'] = array(
    'title'            => t('Add Entry'),
    'description'      => t('Use this option to add an entry to the current zone file.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('amazon_r53_add_record_form', 0),
    'access arguments' => array('add r53 entry'),
    'weight'           => 103,
    'type'             =>  MENU_NORMAL_ITEM,
  );

  $items['admin/settings/r53/check'] = array(
    'title'            => t('Check'),
    'description'      => t('This Feature provides the ability to test the integration between Aegir and AWS R3.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('amazon_r53_check_form', 0),
    'access arguments' => array('manage r53 zones'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 104,
  );

  $items['node/%node/dns'] = array(
    'title'            => t('DNS'),
    'description'      => 'List of packages available for this platform',
    'page callback'    => 'amazon_r53_site_info',
    'page arguments'   => array(1),
    'access callback'  => '_amazon_r53_access',
    'access arguments' => array(1, 'view r53 entry'),
    'weight'           => 1,
    'type'             => MENU_LOCAL_TASK,
  );

  $items['admin/settings/r53/%/edit'] = array(
    'title'            => t('Edit R53 Zone Record'),
    'description'      => t('Set the site settings for the Amazon R53 Setttings.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('amazon_r53_add_record_form', NULL, NULL , 3),
    'access arguments' => array('edit r53 entry'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

function amazon_r53_help($path, $args) {
  
  switch ($path) {
    case 'admin/settings/r53':
      return '<p>' 
      . t('This module provides the ability to manage the zones files and zone entires
      for an Amazon AWS Route 53 account. To use this module, you need to have the AWS 
      Auth and ID information. The r53 service has only recently come out of beta, and 
      AWS does not currently offer an GUI in the AWS.Amazon.com interface. Knownledge of
      DNS records files and requirements is required.') . '</p>';  

    case 'admin/settings/r53/zones':
      return '<p>' 
      . t('This option provides the a list of all the zones attached to your AWS 
      credentials. Please note, your access maybe controls by the AWS IAM rules and
      are not configurable from this module. Select the zone you want to manage.') . '</p>';  
      
    case 'admin/settings/r53/list':
      return '<p>' 
      . t('This is a list of all entries in a the zone file. If the administrator settings
      for the \'hide types\' is set, then some record types will not be displayed. ') . '</p>';
      
    case 'admin/settings/r53/check':
      return '<p>'
      . t('This is a developer option to allow for test against the matching logic. This module
      is designed to integrate into the site setup and management features of Aegir. Aegir site
      managers will see a R53 DNS tab on the sites content type. This will provide the user 
      with matching and editing for zone entries.</br><b>This feature is still very beta, so the
      validation for DSN entries is not complete.')
      . '</p>';
      
    case 'admin/settings/r53/add':
      return '<p>'
      . t('This option provides the ability to create a new DNS entry in the current zone 
      file. Use with care, as the element validation are not in place. This is a beta feature.
      The code as v2 should prevent you creating problem DNS records in the system. The R53 API
      is fairly stable and prevent some bad data from impacting records.')
      . '</p>';
  }
  
}


/**
 * Helper function called by the DNS node tab. This is part of the 
 * Aegir integration. When the content type is defined, this tab
 * will lookup the dns entries in the current zone using the site->aliases.
 * 
 */
function amazon_r53_site_info( $node ) {

  $hosted_zone = _amazon_get_current_hosted_zone();

  drupal_set_title('DSN Information for ' . $node->title);

  // Adding this to test.
  $node->aliases[] = $node->title;
  $result = _amazon_r53_lookup_site('byname', $node->aliases);

  $output = '';
  if ($result['status']) {
    $output = '<b>SUCCESS!</b> An entry was found for this in the zone file.<br/><br/>';

    $header = array();
    $header[] = array( 'data' => t('Name') );
    $header[] = array( 'data' => t('Value') );

    foreach ($result['entry'] as $index => $entry) {
      $rows = array();
      $rows[] = array( 'Name', $entry['Name'] );
      $rows[] = array( 'Type', $entry['Type'] . ' ( ' . _amazon_get_type_name($entry['Type']) . ')' );
      $rows[] = array( 'TTL', $entry['TTL'] . ' seconds' );
      $rows[] = array( 'Value', implode(',<br/>', $entry['ResourceRecords']) );
      $rows[] = array( l('Edit DNS record', 'admin/settings/r53/' . $entry['Name'] . '/edit' ), array( 'colspan' => 2) );

      $output .= '<h2>Entry: ' . $entry['Name'] . '</h2>';
      $output .= theme('table', $header, $rows);
    }

    if (isset($result['unmatched']) && !empty($result['unmatched'])) {
      $output .= "<br/><h2>UnManaged or Client Domains</h2>";
      $output .= "The following domains are managed by zone file. The client or an different DNS manager is required.<br/>";
      $output .= '<ul style="margin: 20px 50px;"><li>' . implode('<li>', $result['unmatched']) . '</ul>';
    }

  }
  else {
    $output = t('The entry you provides was not found in the zone file; If the DNS
               record is not defined, then this site is using the default wild
               card DNS Entry for the domain.');

    
    $result = array(_amazon_r53_get_wildcard());

    $header = array();
    $header[] = array( 'data' => t('Name') );
    $header[] = array( 'data' => t('Value') );

    foreach ($result['entry'] as $index => $entry) {
      $rows = array();
      $rows[] = array( t('Name'), $entry['Name'] );
      $rows[] = array( t('Type'), $entry['Type'] . ' ( ' . _amazon_get_type_name($entry['Type']) . ')' );
      $rows[] = array( t('TTL'), $entry['TTL'] . ' seconds' );
      $rows[] = array( t('Value'), implode(',<br/>', $entry['ResourceRecords']) );

      $output .= '<h2>Entry: ' . $entry['Name'] . ' (Using Domain *)</h2>';
      $output .= theme('table', $header, $rows);
    }
  }

  $output .= drupal_get_form('amazon_r53_add_record_form', $form_state, $node);
  return $output;
}

/*
 * This builds the add record form.
 *
 */
function amazon_r53_add_record_form($form, $form_state, $node = NULL, $record = NULL) {

  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = l('List', 'admin/settings/r53/list');
  drupal_set_breadcrumb($breadcrumb);
  
  // Get the current hosted zone. IF not set, this function
  // will redirect the user to the zone list page.
  $hosted_zone = _amazon_get_current_hosted_zone();

  $r53 = _amazon_r53_get_service();
  if (empty($r53)) {
    _amazon_r53_message('missing settings');
    return '';
  }

  $hosted_zone_info = _amazon_r53_get_zone_info($hosted_zone);

  $collapsed = FALSE;
  if (!empty($node)) {
    $default_aliases = $node->aliases;
    $collapsed = TRUE;
  }

  $entry = array();
  if (!empty($record)) {
    $collapsed = FALSE;

    $entry = _amazon_r53_get_record($record);
  }

  $form = array();
  $form['dns_info'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('DNS Entry'),
    '#collapsible' => $collapsed,
    '#collapsed'   => $collapsed,
    '#description' => t('This form provides the ability to add, edit or delete a DNS entry.'),
  );

  // This code will make the site aliases the default options. And it will
  // filter to ony show the aliases that fall in the domain managed by
  // the registered DNS Zone File.
  if (isset($default_aliases) && count($default_aliases)>1) {
    $form['dns_info']['name'] = array(
      '#type'          => 'select',
      '#title'         => t('Entry Name'),
      '#options'       => _amazon_r53_filter($default_aliases, $hosted_zone_info),
      '#required'      => TRUE,
      '#element_validate' => array( 'amazon_r53_validate_entry_value' ),
      '#weight'        => 20,
    );
  }
  else {
    $form['dns_info']['name'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Entry Name'),
      '#default_value' => !empty($entry['Name']) ? $entry['Name'] : '.' . $hosted_zone_info['Name'],
      '#required'      => TRUE,
      '#weight'        => 30,
      '#element_validate' => array( 'amazon_r53_validate_entry_value' ),
      '#description'   => t('Enter the record value. The value must end in the value <b>.' . $hosted_zone_info['Name'] . '</b> (training dot is required!)'),
    );
  }

  $form['dns_info']['#zone_entry'] = $entry;

  if (!empty($node->aliases)) {
    $form['dns_info']['name']['#default_value'] = $default_aliases[0] . '.';
  }

  $form['dns_info']['type'] = array(
    '#type'          => 'select',
    '#title'         => t('type'),
    '#options'       => _amazon_r53_get_record_types(),
    '#required'      => TRUE,
    '#weight'        => 40,
    '#default_value' => !empty($entry['Type']) ? $entry['Type'] : variable_get('aws_r53_default_record_type', 'CNAME'),
  );

  $form['dns_info']['ttl'] = array(
    '#type'          => 'textfield',
    '#title'         => t('TTL'),
    '#default_value' => !empty($entry['TTL']) ? $entry['TTL'] : variable_get('aws_r53_default_record_ttl', 3600),
    '#required'      => TRUE,
    '#description'   => t('Enter a time to live in seconds. 100 seconds is the default. Given the low latency of the DNS 
      servers, this default should not be an issue.'),
    '#weight'        => 50,
  );

  $form['dns_info']['value'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Value'),
    '#default_value' => !empty($entry['ResourceRecords']) ? _amazon_r53_entry_output($entry['ResourceRecords']) : variable_get('aws_r53_default_record_value', ''),
    '#required'      => TRUE,
    '#description'   => t('Enter a CName or IP address.') . '<br/><br/>'. variable_get('aws_helper_entry_values', ''),
    '#weight'        => 60,
  );

  if (!empty($entry)) {

    $form['dns_info']['updatebutton'] = array(
      '#type'          => 'submit',
      '#value'         => t('Update Entry'),
      '#weight'        => 81,
    );

    $form['dns_info']['deletebutton'] = array(
      '#type'          => 'submit',
      '#value'         => t('Delete Entry'),
      '#weight'        => 82,
    );
  }
  else {
    $form['dns_info']['addbutton'] = array(
      '#type'          => 'submit',
      '#value'         => t('Add Entry'),
      '#weight'        => 80,
    );
  }

  $form['dns_info']['cancel'] = array(
    '#value'         => l('Cancel', 'admin/settings/r53/list'),
    '#weight'        => 90,
  );

  return $form;
}

/**
 * This is an element validate for the DNS Value.
 */
function amazon_r53_validate_entry_value( $element ) {

  // Example '/\.mydomain\.com\.$/'
  $zone_name = $_SESSION['hosted_zone_name'];
  $zone_name = str_replace('.', '\.', $zone_name);
  $zone_name = '/' . $zone_name . '$/';

  if (!preg_match($zone_name, $element['#value'])) {
    form_set_error('name', 'Zone Record values must end in ' . $_SESSION['hosted_zone_name'] . '.');
    return;
  }

  $matched = _amazon_r53_get_record( $element['#value'] );
  if (!empty($matched)) {
    form_set_error('name', 'Sorry, there is already a DNS record. Please check your entry name. Duplicates are not allowed.');
  }

}

/**
 * This is the submit function for the for the add/edit/delete form.
 * TODO: Move the delete into either a single array of change requests or
 * its down query and delete function.
 */
function amazon_r53_add_record_form_submit($form, $form_state) {

  $values  = $form_state['values'];
  $clicked = $form_state['clicked_button']['#value'];

  if ($clicked=='Update Entry') {

    // This is the exsting value. We use this to allow us
    // to the the API whick record to delete before we add/update
    $zone_entry = $form['dns_info']['#zone_entry'];

    $requested_changes = array();
    $requested_changes[] = array(
      'mode'  => 'DELETE',
      'name'  => $zone_entry['Name'],
      'type'  => $zone_entry['Type'],
      'ttl'   => $zone_entry['TTL'],
      'value' => $zone_entry['ResourceRecords']
    );

    $result = _amazon_r53_change_resource_record( $requested_changes );

    if ($result['status']) {
      drupal_set_message('Processing DELETE becore creating the new record.');
      drupal_set_message($result['message']);
      drupal_set_message($result['id']);
    }
    else {
      drupal_set_message('Error encountered while processing the delete step of the update request.');
      return;
    }

    // IF the delete does not process we will not get this far.
    $requested_changes = array();
    $requested_changes[] = array(
      'mode'  => 'CREATE',
      'name'  => $values['name'],
      'type'  => $values['type'],
      'ttl'   => $values['ttl'],
      'value' => $values['value']
    );

    $result = _amazon_r53_change_resource_record( $requested_changes );

    if ($result['status']) {
      drupal_set_message('Processed an UPDATE of an existing DNS record.');
    }
    else {
      drupal_set_message('Error encountered while processing the create/update request.');
    }

    drupal_goto('admin/settings/r53/'. $values['name'] .'/edit');
  }

  if ($clicked=='Delete Entry') {

    // This is the exsting value. We use this to allow us
    // to the the API whick record to delete before we add/update
    $zone_entry = $form['dns_info']['#zone_entry'];

    $requested_changes = array();
    $requested_changes[] = array(
      'mode'  => 'DELETE',
      'name'  => $zone_entry['Name'],
      'type'  => $zone_entry['Type'],
      'ttl'   => $zone_entry['TTL'],
      'value' => $zone_entry['ResourceRecords']
    );

    $result = _amazon_r53_change_resource_record( $requested_changes );

    if ($result['status']) {
      drupal_set_message('Processing the Delete');
    }
    else {
      drupal_set_message('Error encountered while processing the delete request.');
    }

    drupal_set_message($result['message']);
    drupal_set_message($result['id']);
    return;
  }

  if ($clicked=='Add Entry') {
    $requested_changes = array();
    $requested_changes[] = array(
      'mode'  => 'CREATE',
      'name'  => $values['name'],
      'type'  => $values['type'],
      'ttl'   => $values['ttl'],
      'value' => $values['value']
    );

    $result = _amazon_r53_change_resource_record( $requested_changes);

    drupal_set_message($result['message']);
    drupal_set_message($result['id']);

    if ($result['status']) {
      drupal_set_message('Processing the CREATE');
      drupal_goto('admin/settings/r53/'. $values['name'] .'/edit');
    }
    else {
      drupal_set_message('Error encountered while processing the create request.');
    }

  }

}

/**
 * This is a helper function that collpases the values
 * in the Zone Record Recordset into a string for the edit
 * form.
 */
function _amazon_r53_entry_output( $values = array()) {
  return implode("\n", $values);
}

/**
 * This function will query for a list of all the zones
 * managed by the current auto information.
 */
function amazon_r53_list_hosted_zones() {

  drupal_set_title('Amazon R53 Zones');
  
  $r53 = _amazon_r53_get_service();
  if (empty($r53)) {
    _amazon_r53_message('missing settings');
    return '';
  }

  $result = $r53->listHostedZones();
  $hostedZone = $result['HostedZone'];

  $header = array(
    'Status', 
    'ID',
    'Name',
    '',
    '',
  );

  // When a zone is selected, we dump into session. 
  if (isset($_GET['z'])) {
    $_SESSION['hosted_zone_id']   = $_GET['z'];
    $_SESSION['hosted_zone_name'] = $_GET['n'];
    // For Dev. Remove once we go live.
    // drupal_goto('admin/settings/r53/list');
  }
  
  // recode this.
  $current_session_zone = isset($_SESSION['hosted_zone_id']) ? $_SESSION['hosted_zone_id'] : '';

  $rows = array();
  foreach ($hostedZone as $idx => $zone) {
    $row = array();
    $row[] = array('data' => $current_session_zone==$zone['Id'] ? 'X' : '');
    $row[] = array('data' => $zone['Id']);
    $row[] = array('data' => $zone['Name']);
    $row[] = array('data' => l(t('Select'), 'admin/settings/r53/zones', array( 'query' => 'z=' . $zone['Id'] . '&n=' . $zone['Name'])) );
    $row[] = array('data' => l(t('Manage'), 'admin/settings/r53/list') );
    
    $rows[] = array('data' => $row);
  }

  $output .= theme('table', $header, $rows);

  return $output;
}

/**
 * This function will rerun a list of all the values in a zone.
 */
function amazon_r53_list() {

  drupal_set_title('Amazon Route 53 Zone Records');

  $r53 = _amazon_r53_get_service();
  if (empty($r53)) {
    _amazon_r53_message('missing settings');
    return '';
  }
  
  // Get the Current Session zone. Need t pslit this logic
  // so the Aegir site calls use a specific zone, bs the session
  // approach.
  $hosted_zone = _amazon_get_current_hosted_zone();

  // TODO: move to a helper function. no class methods here. 
  $result = $r53->listResourceRecordSets($hosted_zone);
  $ResourceRecordSets = $result['ResourceRecordSets'];

  $header = array(
    t('Name'),
    t('Type'),
    t('TTL'),
    t('Records'),
  );

  // Stupid solution, but for now, until I get some filters dropped in, this will let
  // the user filter out dns recors that they really do not want to screw with.
  
  $aws_hide_record_types = explode(',', variable_get('aws_hide_record_types', ''));

  $rows = array();
  foreach ($ResourceRecordSets as $index => $entry) {
    if (!in_array($entry['Type'], $aws_hide_record_types)) {
      $row = array();
      $row[] = array( 'data' => l( _amazon_r53_clean($entry['Name']), 'admin/settings/r53/' . $entry['Name'] . '/edit'));
      $row[] = array( 'data' => $entry['Type']);
      $row[] = array( 'data' => $entry['TTL']);
      $row[] = array( 'data' => $entry['ResourceRecords'][0]);
  
      $rows[] = array( 'data' => $row);
    }
  }

  $output = '';
  if (user_access('create r53 zone')) {
    $output .= l('Add New Entry', 'admin/settings/r53/add');
  }

  $output .= theme('table', $header, $rows);

  // If we excluded records, lets let the user know.
  if (is_array($aws_hide_record_types) && count($aws_hide_record_types) > 1) {
    $output .= t('The following Entry Types have been excluded from this list. ') . implode(', ', $aws_hide_record_types);
  }
  else {
    $output .= '** No Record type filters enabled.';
  }
  
  return $output;
}

/**
 * This builds the check for existing zone files. This is for use
 * during the development of the Aegir site integration.
 * 
 * TODO: Add the elemetn validation. CTools validation would help
 */
function amazon_r53_check_form($form, $form_state) {

 
  // Get the current hosted zone. IF not set, this function
  // will redirect the user to the zone list page.
  $hosted_zone = _amazon_get_current_hosted_zone();

  $r53 = _amazon_r53_get_service();
  if (empty($r53)) {
    _amazon_r53_message('missing settings');
    return '';
  }

  $hosted_zone_info = _amazon_r53_get_zone_info($hosted_zone);

  //----------------
  
  $d = _amazon_r53_filter($aliases, $hosted_zone_info);
 
  drupal_set_title('Check the Status of A Site CName');

  $form = array();

  $form['hosted_zone'] = array(
    '#type'          => 'textfield',
    '#title'         => t('hosted_zone'),
    '#default_value' => $hosted_zone_info['Id'],
    '#required'      => TRUE
  );

  $form['value'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Value'),
    '#default_value' => '*.' . $hosted_zone_info['Name'],
    '#required'      => TRUE
  );

  $form['type'] = array(
    '#type'          => 'select',
    '#title'         => t('type'),
    '#options'       => array('byName', 'byValue'),
    '#required'      => TRUE
  );

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Check Entry')
  );

  $form['cancel'] = array(
    '#value'         => l('Cancel', 'admin/settings/r53/list'),
  );

  return $form;
}

/**
 * This is the submit function for the Add/Edit Form.
 */
function amazon_r53_check_form_submit($form, $form_state) {

  $values = $form_state['values'];

  $type        = $values['type'];
  $value       = $values['value'];

  $result = _amazon_r53_lookup_site($type, $value);

  if ($result['status']) {
    drupal_set_message(t('An entry was found for this in the zone file.'));
    drupal_set_message('Name: ' . $result['entry']['Name']);
    drupal_set_message('Type: ' . $result['entry']['Type']);
    drupal_set_message('TTL: ' . $result['entry']['TTL']);
    drupal_set_message('Value: ' . $result['entry']['ResourceRecords'][0]);
  }
  else {
    drupal_set_message('The entry you provides was not found in the zone file;');
    drupal_set_message('If the DNS record is not defined, then this site is using the default wild card DNS Entry for the domain.');
  }

}

